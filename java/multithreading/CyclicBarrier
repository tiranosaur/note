
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.TimeUnit;

public class Main {
    public static void main(String[] args) {
        CyclicBarrier barrier = new CyclicBarrier(3);
        First first = new First(barrier);
        Second second = new Second(barrier);
        Third third = new Third(barrier);
        first.start();
        second.start();
        third.start();
    }
}

class First extends Thread {
    private final CyclicBarrier barrier;

    First(CyclicBarrier barrier) {
        this.barrier = barrier;
    }

    @Override
    public void run() {
        try {
            System.out.println("First thread - 1");
            barrier.await();
            System.out.println("First thread - 2");
            barrier.await();
            System.out.println("First thread - 3");
            barrier.await();
        } catch (Exception e) {
        }
    }
}

class Second extends Thread {
    private final CyclicBarrier barrier;

    Second(CyclicBarrier barrier) {
        this.barrier = barrier;
    }

    @Override
    public void run() {
        try {
            System.out.println("Second thread - 1");
            TimeUnit.SECONDS.sleep(2);
            barrier.await();
            System.out.println("Second thread - 2");
            TimeUnit.SECONDS.sleep(2);
            barrier.await();
            System.out.println("Second thread - 3");
            TimeUnit.SECONDS.sleep(2);
            barrier.await();
        } catch (Exception e) {
        }
    }
}

class Third extends Thread {
    private final CyclicBarrier barrier;

    Third(CyclicBarrier barrier) {
        this.barrier = barrier;
    }

    @Override
    public void run() {
        try {
            System.out.println("Third thread - 1");
            TimeUnit.SECONDS.sleep(5);
            barrier.await();
            System.out.println("Third thread - 2");
            TimeUnit.SECONDS.sleep(5);
            barrier.await();
            System.out.println("Third thread - 3");
            TimeUnit.SECONDS.sleep(5);
            barrier.await();
        } catch (Exception e) {
        }
    }
}
