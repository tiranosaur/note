package com.example.springdemo.service;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.boot.test.mock.mockito.SpyBean;
import org.springframework.stereotype.Service;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.Optional;

import static org.junit.Assert.assertEquals;


@RunWith(SpringRunner.class)
public class TestServiceTest {
    @MockBean
    ProviderService providerService;

    @SpyBean
//    @InjectMocks
//    @MockBean
    TestService testService;

    @Before
    public void setup() {
    }

    @Test
    public void getName_Test() {
        String actual = "Vasia";
        Mockito.when(providerService.getName(Mockito.any())).thenReturn("Vasia");

        String expected = testService.getName();

        assertEquals(expected, actual);
    }
}


/*

@Service
public class TestService {
    @Autowired
    ProviderService providerService;

    public String getName() {
        String result = Optional.ofNullable(providerService.getName("John")).orElse("");
        return result;
    }
}


@Service
public class ProviderService {
    public String getName(String str) {
        return String.format("MyName is %s", str);
    }
}

*/


@RunWith(SpringRunner.class)
@WebMvcTest(controllers = PersonController.class)
class PersonControllerTest {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private UserTokenProviderDecorator userTokenProviderDecorator;

    @Before
    void setup() {
        when(userTokenProviderDecorator.getRZBK()).thenReturn("8840");
    }

    @Test
    void getPerson() throws Exception {
        mvc.perform(get("/person")
                        .accept(MediaType.APPLICATION_JSON)
                        .param("personNumber", "1"))
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.isJuristicPerson").exists())
                .andExpect(MockMvcResultMatchers.jsonPath("$.isJuristicPerson", is(false)));
    }
}
