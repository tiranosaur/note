Паттерн (от англ. Pattern) — образец, шаблон.

1. Порождающие паттерны 
(Паттерны которые создают новые объекты, или позволяют получить доступ к уже существующим. То есть те шаблоны, по которым можно создать новый автомобиль и как это лучше сделать.)
	1.1 Singleton (одиночка)

	1.2 Простая фабрика (Simple Factory) - генерирует экземпляр для клиента, не раскрывая никакой логики.

	1.3 Абстрактная фабрика (Abstract Factory) - Фабрика фабрик. Фабрика, которая группирует индивидуальные, 
	но связанные/зависимые фабрики без указания их конкретных классов.

	1.4 Строитель (Builder) - Шаблон позволяет вам создавать различные виды объекта, избегая засорения конструктора. 
	Он полезен, когда может быть несколько видов объекта или когда необходимо множество шагов, связанных с его созданием.

	1.5 Прототип (Prototype) - Прототип создает объект, основанный на существующем объекте при помощи клонирования.

2. Поведенчески паттерны
(Поведенческие шаблоны связаны с распределением обязанностей между объектами. Их отличие от структурных шаблонов заключается в том, что они не просто описывают структуру, но также описывают шаблоны для передачи сообщений / связи между ними. Или, другими словами, они помогают ответить на вопрос "Как запустить поведение в программном компоненте?")
	2.1 Цепочка обязанностей (Chain of Responsibility) - цепочка обязанностей помогает строить цепочки объектов. 
	Запрос входит с одного конца и проходит через каждый объект, пока не найдет подходящий обработчик.

	2.2 Команда (Command) - Позволяет вам инкапсулировать действия в объекты. 
	Основная идея, стоящая за шаблоном — это предоставление средств, для разделения клиента и получателя.

	2.3 Итератор (Iterator) - Простыми словами: Представляет способ доступа к элементам объекта без показа базового представления.

	2.4 Посредник (Mediator) - Шаблон посредник подразумевает добавление стороннего объекта (посредника) для управления 
	взаимодействием между двумя объектами (коллегами). Шаблон помогает уменьшить связанность (coupling) классов, общающихся друг с другом, 
	ведь теперь они не должны знать о реализациях своих собеседников.

	2.5 Хранитель (Memento) - Шаблон хранитель фиксирует и хранит текущее состояние объекта, чтобы оно легко восстанавливалось.

	2.6 Наблюдатель (Observer) - Шаблон определяет зависимость между объектами, чтобы при изменении состояния одного из них зависимые от него узнавали об этом.

	2.7 Посетитель (Visitor) - Шаблон посетитель позволяет добавлять будущие операции для объектов без их модифицирования.

	2.8 Стратегия (Strategy) - Шаблон стратегия позволяет переключаться между алгоритмами или стратегиями в зависимости от ситуации.
	
	2.9 Состояние (State) - Шаблон позволяет менять поведение класса при изменении состояния.

	2.10 Шаблонный метод (Template Method) - Шаблонный метод определяет каркас выполнения определённого алгоритма, но реализацию самих этапов делегирует дочерним классам.

3 Структурные шаблоны
	3.1 Адаптер (Adapter) - Шаблон позволяет обернуть несовместимые объекты в адаптер, чтобы сделать их совместимыми с другим классом.

	3.2 Мост (Bridge) - Шаблон мост — это предпочтение композиции над наследованием. Детали реализации передаются из одной иерархии в другой объект с отдельной иерархией.

	3.3 Компоновщик (Composite) - Шаблон компоновщик позволяет клиентам работать с индивидуальными объектами в едином стиле.

	3.4 Декоратор (Decorator) - Шаблон декоратор позволяет вам динамически изменять поведение объекта во время работы, оборачивая их в объект класса декоратора.

	3.5 Фасад (Facade) - Шаблон фасад предоставляет упрощенный интерфейс для сложной системы.

	3.6 Приспособленец (Flyweight) - Приспособленец используется для минимизации использования памяти или вычислительной 
	стоимости путем разделения ресурсов с наибольшим количеством похожих объектов.

	3.7 Заместитель (Proxy) - Используя шаблон заместитель, класс отображает функциональность другого класса.


https://tproger.ru/translations/design-patterns-simple-words-1/
https://tproger.ru/translations/design-patterns-simple-words-2/
https://tproger.ru/translations/design-patterns-simple-words-3/
