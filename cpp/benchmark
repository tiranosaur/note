#include <iostream>
#include <cmath>
#include <chrono>

float method(int n) {
    int acc = 0;
    for (int i = 0; i < n; ++i) {
        float x = ((float) rand()) / (float) RAND_MAX;
        float y = ((float) rand()) / (float) RAND_MAX;
        if ((x * x + y * y) < 1.0)
            acc += 1;
    }
    return 4.0 * acc / n;
}

bool isPrime(int num) {
    if (num == 2) return true;
    if (num <= 1 || num % 2 == 0) return false;
    double sqrt_num = sqrt(double(num));
    for (int div = 3; div <= sqrt_num; div += 2) {
        if (num % div == 0) return false;
    }
    return true;
}

int main() {
    auto start = std::chrono::high_resolution_clock::now();
    //method(100000000);
    for (int i = 0; i < 10000000; i++) isPrime(i);
    auto stop = std::chrono::high_resolution_clock::now();
    auto durationSec = std::chrono::duration_cast<std::chrono::seconds>(stop - start);
    auto durationMilisec = std::chrono::duration_cast<std::chrono::milliseconds>(stop - start);

    std::cout
            << "Time taken by function: "
            << durationSec.count()
            << ":"
            << durationMilisec.count() - durationSec.count() * 1000
            << std::endl;

    return 0;
}
