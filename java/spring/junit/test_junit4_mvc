package com.example.springdemo.controller;

import com.example.springdemo.model.User;
import com.example.springdemo.repository.UserRepository;
import com.example.springdemo.service.UserService;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.SpyBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import java.util.List;
import java.util.UUID;

import static org.hamcrest.core.Is.is;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@RunWith(SpringRunner.class)
@WebMvcTest(excludeAutoConfiguration = SecurityAutoConfiguration.class, controllers = UserController.class)
public class UserControllerTest {
    @Autowired
    private MockMvc mvc;

    @SpyBean
    UserRepository userRepository;

    @SpyBean
    UserService userService;

    @Before
    public void setup() {
        userRepository.setUsers(getUserList2());
    }

    @Test
    public void index_fault() throws Exception {
        mvc.perform(get("/users"))
                .andExpect(status().is(404));
    }

    @Test
    public void index() throws Exception {
        mvc.perform(get("/user/all"))
                .andExpect(status().isOk());
    }

    @Test
    public void getPerson() throws Exception {
        mvc.perform(get("/user")
                        .accept(MediaType.APPLICATION_JSON)
                        .param("name", "name1")
                        .param("age", "33")
                )
                .andExpect(status().isOk())
                .andExpect(MockMvcResultMatchers.jsonPath("$.name").exists())
                .andExpect(MockMvcResultMatchers.jsonPath("$.name", is("name1")))
                .andExpect(MockMvcResultMatchers.jsonPath("$.age", is(33)));
    }

    private List<User> getUserList2() {
        return List.of(
                new User(UUID.randomUUID(), "name1", 33),
                new User(UUID.randomUUID(), "name2", 34)
        );
    }
}
