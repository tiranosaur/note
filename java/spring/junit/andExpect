// specific object
    @Test
    public void index1() throws Exception {
        users = JsonPreparer.prepare("json/users.json", new TypeReference<>() {
        });
        when(userRepository.findAll()).thenReturn(users);
        List<User> list = new ArrayList<>(users);
        mockMvc.perform(get("/"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$", equalTo(JsonPreparer.asParsedJson(list))));
        //.andExpect(jsonPath("$").value(equalTo(JsonPreparer.asParsedJson(list))));
    }
    
// class type
 @Test
    public void index2() throws Exception {
        users = JsonPreparer.prepare("json/users.json", new TypeReference<>() {
        });
        when(userRepository.findAll()).thenReturn(users);
        mockMvc.perform(get("/"))
                .andExpect(status().isOk())
                .andExpect(result -> Assert.assertNotNull(JsonPreparer.toObject(result.getResponse().getContentAsString(), new TypeReference<List<User>>() {
                })));
    }
    
    
// class type
    @Test
    public void index3() throws Exception {
        users = JsonPreparer.prepare("json/users.json", new TypeReference<>() {
        });
        when(userRepository.findAll()).thenReturn(users);
        var result = mockMvc.perform(post("/"))
                .andExpect(status().isOk())
                .andReturn()
                .getResponse()
                .getContentAsString();
        Assert.assertNotNull(JsonPreparer.toObject(result, new TypeReference<User>() { //!!!!!!!!!!!
        }));
    }
