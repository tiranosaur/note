import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.Serializable;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

@Slf4j
@RestController
public class MainController {
    @GetMapping("/")
    public ResponseEntity<Object> index() throws Exception {
        HttpClient client = HttpClient.newHttpClient();

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://filesamples.com/samples/code/json/sample1.json"))
                .header("content-type", "application/json")
                .GET()
                .build();

        HttpResponse<String> response = client.send(
                request,
                HttpResponse.BodyHandlers.ofString()
        );

        if (response.statusCode() == 200) {
            String body = response.body();
            ObjectMapper mapper = new ObjectMapper();
            Fruit fruit = mapper.readValue(body, Fruit.class);
            return ResponseEntity.ok(fruit);
        }

        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }
}

@Data
@NoArgsConstructor
@AllArgsConstructor
class Fruit implements Serializable {
    @JsonProperty(value = "fruit")
    private String fruit;
    private String size;
    private String color;
}

===================================================================================================================================

@SpringBootApplication
public class SpringConsoleApplication implements CommandLineRunner {
    private Logger LOGGER = LoggerFactory.getLogger(SpringConsoleApplication.class);

    public static void main(String[] args) {
        SpringApplication.run(SpringConsoleApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        getRequest();
        postRequest();
        postMultipart();
    }

    public void getRequest() {
        try {
            RequestConfig config = RequestConfig.custom()
                .setConnectTimeout(100)
                .setConnectionRequestTimeout(100)
                .build();
            CloseableHttpClient httpClient = HttpClientBuilder.create().setDefaultRequestConfig(config).build();
            //CloseableHttpClient httpClient = HttpClients.createDefault();
            HttpGet uploadFile = new HttpGet("http://localhost:8084/get");

            CloseableHttpResponse response = httpClient.execute(uploadFile);
            HttpEntity responseEntity = response.getEntity();

            String responseString = EntityUtils.toString(responseEntity, "UTF-8");
            System.out.println(responseString);
            httpClient.close();
        } catch (Exception e) {
            LOGGER.error("get request failed");
        }
    }

    public void postRequest() {
        try {
            CloseableHttpClient httpClient = HttpClients.createDefault();
            HttpPost uploadFile = new HttpPost("http://localhost:8084/post");

            CloseableHttpResponse response = httpClient.execute(uploadFile);
            HttpEntity responseEntity = response.getEntity();

            String responseString = EntityUtils.toString(responseEntity, "UTF-8");
            System.out.println(responseString);
            httpClient.close();
        } catch (Exception e) {
            LOGGER.error("get request failed");
        }
    }

    public void postMultipart() {
        try {
            CloseableHttpClient httpClient = HttpClients.createDefault();
            HttpPost uploadFile = new HttpPost("http://localhost:8084/multi");
            MultipartEntityBuilder builder = MultipartEntityBuilder.create();
            builder.addTextBody("field1", "yes", ContentType.MULTIPART_FORM_DATA);


            File file = new File("pom.xml");
            builder.addBinaryBody(
                    "file",
                    new FileInputStream(file),
                    ContentType.APPLICATION_OCTET_STREAM,
                    file.getName()
            );

            HttpEntity multipart = builder.build();
            uploadFile.setEntity(multipart);
            CloseableHttpResponse response = httpClient.execute(uploadFile);
            HttpEntity responseEntity = response.getEntity();

            String responseString = EntityUtils.toString(responseEntity, "UTF-8");
            System.out.println(responseString);
            httpClient.close();
        } catch (Exception e) {
            LOGGER.error("post multipart request failed");
            e.printStackTrace();
        }

    }
}


/*
        <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpcore -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpcore</artifactId>
            <version>4.4.15</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpmime -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpmime</artifactId>
            <version>4.5.13</version>
        </dependency>
 */
