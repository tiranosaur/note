using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using System.IO;

namespace ConsoleApp
{
    public static class Program
    {
        public static void Main(string[] args)
        {       
             using (ApplicationContext db = new ApplicationContext())
            {
                var result = db.Users.Include(u => u.Role);
            }
        }
    }

    public class ApplicationContext : DbContext
    {
        internal DbSet<User> Users { get; set; }
        internal DbSet<UserRole> Role { get; set; }

        public ApplicationContext()
        {
            // Database.EnsureCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            var config = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json")
                .Build();
            string connectionString = config.GetConnectionString("Default");
            optionsBuilder.UseSqlServer(connectionString);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // many-to-many
            modelBuilder.Entity<LanguageUser>().HasKey(key => new { key.UserId, key.LanguageId });
            
            modelBuilder.Entity<UserRole>().HasData(
                new UserRole[]
                {
                      new UserRole {Id = 1, Role = "User"},
                      new UserRole {Id = 2, Role = "Admin"}
                }
            );

            modelBuilder.Entity<User>().HasData(
                new { Id = 1, UserName = "Admin", RoleId = 2 },
                new { Id = 2, UserName = "User", RoleId = 1 }
                );
                
            modelBuilder.Entity<User>().HasData(
                new User[]
                {
                    new User {Id = 7, UserName = "User_7", RoleId = 1}
                }
            );
        }
    }

    public class User
    {
        public int Id { get; set; }

        public string UserName { get; set; }
        
        public int? RoleId;

        [ForeignKey("RoleId")]
        public UserRole Role { get; set; }
        
        // many-to-many
        public List<LanguageUser> LanguageUser { get; set; }

        public User()
        {
            LanguageUser = new List<LanguageUser>();
        }
    }
    
    public class UserRole
    {       
        public int Id { get; set; }
        public string Role { get; set; }
    }
    
    public class Language
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public List<LanguageUser> LanguageUser { get; set; }
        // many-to-many
        public Language()
        {
            LanguageUser = new List<LanguageUser>();
        }
    }
    
    // many-to-many
    public class LanguageUser
    {
        public int UserId { get; set; }
        public User User;
        public int LanguageId { get; set; }
        public Language Language;
    }
}
