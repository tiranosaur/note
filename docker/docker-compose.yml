version: "3"

services:
#   admin user - root
  mysql:
    container_name: 'mysql8'
    image: mysql:8.0
    restart: 'always'
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: png
      MYSQL_USER: png
      MYSQL_PASSWORD: png
      
  redis:
    container_name: 'redis'
    image: redis:latest
    ports:
      - 7001:6379
      - 6379:6379

#  docker run -d -p 9980:9980  --name office -e "extra_params=--o:net.service_root=/office --o:ssl.enable=false —o:server_name=localhost:9195" collabora/code:22.05.12.3.1
  collabora:
    container_name: 'collabora-office'
    image: collabora/code:22.05.12.3.1
    environment:
      - extra_params=--o:net.service_root=/office --o:ssl.enable=false —o:server_name=localhost:9195
    ports:
      - 9981:9980
      - 9980:9980


  elasticsearch:
    container_name: 'elasticsearch'
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.1
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - ELASTIC_CONTAINER=true
    ports:
      - 9201:9200
      - 9200:9200
  version: "3.0"


# ===============ELK start
  elasticsearch:
    container_name: 'ELK-elasticsearch'
    image: docker.elastic.co/elasticsearch/elasticsearch:8.2.3
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    networks:
      - elk-net
    ports:
      - 9200:9200

  logstash:
    container_name: 'ELK-logstash'
    image: logstash:8.2.3
    environment:
      LS_JAVA_OPTS: "-Xmx512m -Xms512m"
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    networks:
      - elk-net
    depends_on:
      - elasticsearch

  kibana:
    container_name: 'ELK-kibana'
    image: docker.elastic.co/kibana/kibana:8.2.3
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - elk-net
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601

networks:
  elk-net:
    driver: bridge
# ===============ELK end     

  # AWS
  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566"  # основной порт API
      - "4571:4571"  # порт S3
    environment:
      - SERVICES=s3,ec2,lambda,dynamodb
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - AWS_ACCESS_KEY_ID=key123
      - AWS_SECRET_ACCESS_KEY=key345
    volumes:
#      - "./data/localstack:/tmp/localstack/data"
      - "/var/run/docker.sock:/var/run/docker.sock"
# end AWS ------------------------

  mongodb:
    container_name: 'mongodb'
    image: mongo:5.0.15
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=Pass123
    ports:
      - 27018:27017
      - 27017:27017

  rabbitmq:
    container_name: 'rabbitmq'
    image: rabbitmq:3-management
    ports:
      - 15673:15672
      - 15672:15672
      - 5673:5672
      - 5672:5672

  postgres:
    container_name: 'postgres'
    image: postgres
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=Pass123
    ports:
      - 5433:5432
      - 5432:5432
      
#  kafka
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

 wiremock:
    image: wiremock/wiremock
    container_name: mywiremock
    command: "--global-response-templating --verbose"
    volumes:
      - ./__files:/home/wiremock/__files
      - ./mappings:/home/wiremock/mappings
    ports:
      - 8888:8080

# python -m g4f.cli gui -port 8080 -debug
# http://192.168.1.114:8080/chat/
  gpt4free:
    image: hlohaus789/g4f:latest
    shm_size: 2gb
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - .:/app
    ports:
      - '8080:8080'
      - '1337:1337'
      - '7900:7900'
# user - sa
# pass - Pass123~!@
  mssql:
    container_name: ms-sql
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      ACCEPT_EULA: 'Y'
      MSSQL_SA_PASSWORD: 'Pass123~!@'
      MSSQL_DATA_DIR: /var/opt/mssql/data
      MSSQL_PID: 'Developer'
      MSSQL_TCP_PORT: 1433
    ports:
      - 1455:1433
      - 1453:1433
    volumes:
      - ./data:/var/opt/mssql/data
      - ./log:/var/opt/mssql/log
      - ./secrets:/var/opt/mssql/secrets
