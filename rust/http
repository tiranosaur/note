//      Simple Http
    use http_req::request;

    fn main() {
        let mut writer = Vec::new();
        let res = request::get("http://test.local/", &mut writer).unwrap();
        let result = std::str::from_utf8(&writer).unwrap();

        println!("Status: {} {}", res.status_code(), res.reason());
        println!("{}", result);
    }



***********************************

use std::collections::HashMap;
use reqwest::header::CONTENT_TYPE;
use serde_derive::Deserialize;
use serde_derive::Serialize;

#[tokio::main]
async fn main() {
    let fact = post_reqwest().await;
    println!("fact = {:#?}", fact);
}

async fn post_reqwest() -> Result<String, Box<dyn std::error::Error>> {
    let mut map = HashMap::new();
    map.insert("lang", "rust");
    map.insert("body", "json");

    let client = reqwest::Client::new();
    let response = client.post("http://localhost:8081")
        .header(CONTENT_TYPE, "application/json")
        .json(&map)
        .send()
        .await?;
    let body = response.text().await?;
    let user: User = serde_json::from_str(&body).unwrap();
    return Ok("".to_string());
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
struct User {
    id: String,
    name: String,
    age: i8,
}
