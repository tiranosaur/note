1. args()	Метод выполнения, который ограничивает параметры сопоставления точки подключения типом выполнения

2. @args()	Метод выполнения, который ограничивает пометки параметров соответствия точки подключения аннотациями выполнения

3. execution()	Соответствующий метод выполнения точки подключения
  
4. this()	Ограничьте ссылочный тип Бина точки соединения, соответствующей прокси-серверу AOP, указанным типом Бина

5. target()	Ограничить точки подключения от сопоставления целевых объектов до классов указанных типов

6. @target()	Ограничить точки подключения от сопоставления целевого объекта с указанным классом аннотаций

7. within()	Ограничить точки подключения, чтобы соответствовать указанному типу

8. @within()	Ограничить точки подключения, чтобы соответствовать указанному типу аннотации

9. @annotation	Ограничить сопоставление точек подключения с указанными аннотациями

10. bean - по имени. аналог sql limit
  * bean(*ExternalService) - все классы оканчивающиеся на ExternalService
  
  
 //FeignClient
 @Around("@within(org.springframework.cloud.openfeign.FeignClient)")
  
*execution(* executeE(..)) - название метода с любыми параметрами
*execution(* executeE(String)) - название метода со String
*execution(* com.example.console.controllers.*.*(..))) - все методы классов в папке controllers

// Match all method in interface VerbClient and subclasses implementation
 @Around("execution(* com.xxx.VerbClient+.*(..))")

// Match all method `patchPreferences` in interface VerbClient and subclasses implementation
 @Around("execution(* com.xxx.VerbClient+.patchPreferences(..))")

// Or make IgnoreHttpClientErrorExceptions work for Type, 
// and match all method with in annotated interface and subclass implementation
// (@Inherited must be used)
// By this way, you can mark your VerbClient feign interface with this annotation
 @Around("execution(* (com.yyy.IgnoreHttpClientErrorExceptions *+).*(..))")
