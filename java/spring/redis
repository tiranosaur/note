        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-redis</artifactId>
            <version>2.5.1</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>3.6.0</version>
            <optional>true</optional>
        </dependency>
        
        
        
        
        
        
//application.properties
spring.redis.host=localhost
spring.redis.port=6379





//configuration
@Configuration
public class RedisConfiguration {
    @Value("${spring.redis.host}")
    private String host;

    @Value("${spring.redis.port}")
    private int port;

    @Bean
    JedisConnectionFactory jedisConnectionFactory() {
        JedisConnectionFactory jedisConFactory
                = new JedisConnectionFactory();
        jedisConFactory.setHostName(host);
        jedisConFactory.setPort(port);
        return jedisConFactory;
    }

    @Bean
    public RedisTemplate<String, Object> redisTemplate() {
        final RedisTemplate<String, Object> template = new RedisTemplate<String, Object>();
        template.setConnectionFactory(jedisConnectionFactory());
        template.setValueSerializer(new GenericToStringSerializer<Object>(Object.class));
        return template;
    }
}



        

@SpringBootApplication
public class RedisApplication implements CommandLineRunner {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;


    public static void main(String[] args) {
        SpringApplication.run(RedisApplication.class, args);
    }


    @Override
    public void run(String... args) throws Exception {
        String key = "fffuck";
        Random rnd = new Random();
        Integer value = rnd.nextInt();
        System.out.println(value);
        if (redisTemplate.hasKey(key)){
            System.out.println(redisTemplate.opsForValue().get(key));
        }
        redisTemplate.opsForValue().set(key, value);    
    }
}
