1. args()	Метод выполнения, который ограничивает параметры сопоставления точки подключения типом выполнения

2. @args()	Метод выполнения, который ограничивает пометки параметров соответствия точки подключения аннотациями выполнения

3. execution()	Соответствующий метод выполнения точки подключения
  
4. this()	Ограничьте ссылочный тип Бина точки соединения, соответствующей прокси-серверу AOP, указанным типом Бина

5. target()	Ограничить точки подключения от сопоставления целевых объектов до классов указанных типов

6. @target()	Ограничить точки подключения от сопоставления целевого объекта с указанным классом аннотаций

7. within()	Ограничить точки подключения, чтобы соответствовать указанному типу

8. @within()	Ограничить точки подключения, чтобы соответствовать указанному типу аннотации

9. @annotation	Ограничить сопоставление точек подключения с указанными аннотациями

10. bean - по имени. аналог sql limit
  * bean(*ExternalService) - все классы оканчивающиеся на ExternalService
  
  execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern) throws-pattern?)
  
//добавить + для abstract class или interface
  execution(* com.x.y.x.MyClass+.myMethod(..))
 
//Выполнение любого public метода:
  execution(public * *(..))
  
//Выполнение любого метода, начинающегося с «set»:
  execution(* set*(..))
  
//Выполнение любого метода интерфейса AccountService:
  execution(* com.xyz.service.AccountService.*(..))
  
//Выполнение любого метода, определенного в пакете услуг:
  execution(* com.xyz.service.*.*(..))
  
//Выполнение любого метода любого класса, определенного в пакете услуг и всех подпакетах:
  execution(* com.xyz.service..*.*(..))
  
//Выполнение любого метода класса JoinPointObjP2, определенного в пакете pointcutexp и всех подпакетах:
  execution(* com.test.spring.aop.pointcutexp..JoinPointObjP2.*(..))")

//Любой метод всех классов, аннотированный @Transactional.
  @within(org.springframework.transaction.annotation.Transactional)
  @target(org.springframework.transaction.annotation.Transactional)

//Любой метод, аннотированный @Transactional.
  @annotation(org.springframework.transaction.annotation.Transactional)
  @within и @target - аннотации для классов, @annotation - аннотации для методов
  
//FeignClient
  @Around("@within(org.springframework.cloud.openfeign.FeignClient)")

// название метода с любыми параметрами
  @Around("execution(* executeE(..))")

// название метода со String
  @Around("execution(* executeE(String))")

// все методы классов в папке controllers
  @Around("execution(* com.example.console.controllers.*.*(..)))")

// Match all method in interface VerbClient and subclasses implementation
 @Around("execution(* com.xxx.VerbClient+.*(..))")

// Match all method `patchPreferences` in interface VerbClient and subclasses implementation
 @Around("execution(* com.xxx.VerbClient+.patchPreferences(..))")

// Or make IgnoreHttpClientErrorExceptions work for Type, 
// and match all method with in annotated interface and subclass implementation
// (@Inherited must be used)
// By this way, you can mark your VerbClient feign interface with this annotation
 @Around("execution(* (com.yyy.IgnoreHttpClientErrorExceptions *+).*(..))")
