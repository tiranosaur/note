https://ravesli.com/urok-25-razrabotka-vashih-pervyh-programm/#toc-7

Шаг №1: Определите проблему
Шаг №2: Определите свой инструментарий, цели и план бэкапа
Шаг №3: Разбейте проблему на части
Шаг №4: Определите последовательность событий
Шаг №5: Определите данные ввода и данные вывода на каждом этапе
Шаг №6: Позаботьтесь о деталях
Шаг №7: Соедините данные ввода с данными вывода в программе

Советы
Пускай ваши первые программы будут простыми. Очень часто новички ставят слишком высокие планки для своих первых более-менее серьезных программ. 
Например, «Я хочу написать игру с графикой, звуком, монстрами, подземельями и городом, в котором можно будет продавать найденные вещи». 
Если вы попытаетесь написать что-нибудь подобное в начале вашего пути как программиста, то очень скоро у вас пропадет любое желание программировать. 
Вместо этого, пускай ваши первые цели/задания/программы будут попроще, например, «Я хочу написать программу, которая отображала бы 2D-поле на экране».

Добавляйте новый функционал со временем. Как только вы написали простенькую программу, которая работает (даже без сбоев), 
то следующим вашим шагом должно стать добавление нового функционала. Например, когда вы сможете отображать 2D-поле на экране — добавьте персонажа,
который сможет ходить по этому полю. После того, как вы уже сможете ходить — добавьте стены, 
которые будут препятствовать вашему движению. После того, как у вас будут стены — постройте из них город. После того, как 
у вас будет город — добавьте персонажей-продавцов. При таком подходе на вас не наваливается всё сразу и вы знаете с чего начинать, 
что делать дальше, в какой последовательности и т.д.

Фокусируйтесь только на одном задании в определенный промежуток времени. Не пытайтесь сделать всё и сразу, 
не распыляйтесь на несколько задач одновременно. Сосредоточьтесь на одном. Лучше иметь одно выполненное задание и пять невыполненных, 
нежели шесть частично выполненных заданий. Если вы рассеиваете свое внимание в нескольких направлениях, то и ошибок будет много.

Тестируйте каждую новую часть кода. Начинающие программисты часто пишут программу за один присест. Затем, при компиляции проекта, 
получают сотни ошибок. Поэтому, после написания определенной части кода — сразу компилируйте и тестируйте её. 
Если ваш код не будет работать, то вы будете знать, где находится проблема, и исправить её будет намного легче. 
Как только вы убедились, что ваш код рабочий — переходите к написанию следующей части, а затем repeat. 
Тестирование может занять больше времени, но в конечном итоге ваш код будет работать так, как вам нужно.

Большинство новичков пропустят некоторые из этих шагов и советов, так как это не столь захватывающе, как, собственно, 
сам процесс кодинга. Хорошая новость заключается в том, что как только вы освоите все эти концепции — они станут для вас 
естественными в процессе разработки ваших программных продуктов.
