public class Main {
    public static void main(String[] args) throws ExecutionException, InterruptedException {
        ExecutorService ec = Executors.newFixedThreadPool(1);
        MyThread myThread = new MyThread();
        System.out.println(ec.submit(myThread).get());
    }
}

class MyThread implements Callable<Integer> {
    @Override
    public Integer call() throws Exception {
        Thread.sleep(2000);
        return 2000;
    }
}


-------------------------------------------------------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class Main {
    public static final int THREAD_POOL_SIZE = 2;

    public static void main(String[] args) throws Exception {
        ExecutorService executorService = Executors.newFixedThreadPool(THREAD_POOL_SIZE);

        List<Future<String>> futureList = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            int threadNumber = i;
            futureList.add(executorService.submit(() -> (method(threadNumber))));
        }

        List<String> resultList = new ArrayList<>();
        for (Future<String> future : futureList) {
            resultList.add(future.get());
        }
        
        executorService.shutdown();
        System.out.println(resultList);
    }

    public static String method(int threadNumber) {
        System.out.println("Thread " + threadNumber + " ++++++++++++++++++++++++++++++++++");
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("Thread " + threadNumber + " ---");
        return "Thread #" + threadNumber + " finished";
    }
}
