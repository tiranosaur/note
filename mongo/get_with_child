db.collection_name.aggregate([
    {
        $match:
            {'_id': 'IeCQsxyCnsUqbmYB'}
    },
    {
        $addFields: {
            'path_name': {
                $cond: {
                    if: {
                        $eq: ['$isFolder', true]
                    },
                    then: {
                        $getField: {
                            input: {
                                $regexFind: {
                                    input: '$fileUrl',
                                    regex: '/([^\/]*).vt-folder',
                                    options: 'si'
                                }
                            }, field: 'captures'
                        }
                    },
                    else: {
                        $toString: '------------------------------------------'
                    }
                }
            }
        }
    },
    {$unwind: '$path_name'},
    {
        $graphLookup: {
            from: 'recognized_files',
            startWith: {$toString: {$concat: ['$path', '$path_name', '/']}},
            connectFromField: 'path',
            connectToField: 'path',
            as: 'children'
        }
    },
    {
        $set: {
            children: {
                $sortArray: {
                    input: '$children',
                    sortBy: {'dateOfCreation': 1}
                }
            }
        }
    },
    {
        $set: {
            children: {
                $slice: ['$children',9]
            }
        }
    }
])



        String collectionName = "collection_name";
        MatchOperation findOne = Aggregation.match(new Criteria("_id").is("IeCQsxyCnsUqbmYB"));

        Criteria criteria = Criteria.where("isFolder").is(true);
        MongoExpression xxx = MongoExpression.create("$getField:{input:{$regexFind:{input:'$fileUrl',regex:'/([^\\/]*).vt-folder',options:'si'}},field:'captures'}");
        Document conditionalOperators = ConditionalOperators.when(criteria).then(xxx).otherwise("---------------").toDocument();
        AddFieldsOperation addPathName = Aggregation.addFields().addField("path_name").withValue(conditionalOperators).build();
        UnwindOperation unwindOperation = Aggregation.unwind("path_name");


        MongoExpression startWithExpression = MongoExpression.create("{$toString:{$concat:['$path','$path_name','/']}}");
        AggregationExpression startWith = AggregationExpression.from(startWithExpression);
        GraphLookupOperation addChildren = GraphLookupOperation.builder().from(collectionName)
                .startWith(startWith)
                .connectFrom("path")
                .connectTo("path")
                .as("children");

        MongoExpression sort = MongoExpression.create("$sortArray:{input:'$children',sortBy:{'dateOfCreation': 1}}");
        SetOperation sortChildren = SetOperation.builder().set("children").toValueOf(sort);

        MongoExpression limit = MongoExpression.create("$slice: ['$children',9]");
        SetOperation limitChildren = SetOperation.builder().set("children").toValueOf(limit);

        Aggregation aggregation = Aggregation.newAggregation(List.of(findOne, addPathName, unwindOperation, addChildren, sortChildren, limitChildren));
        AggregationResults<FileInfoMongoEntity> aggregate = mongoTemplate.aggregate(aggregation, collectionName, FileInfoMongoEntity.class);
        List<FileInfoMongoEntity> result = aggregate.getMappedResults();
