// serde = "1.0.137"
// serde_derive = "1.0.140"
// serde_json = "1.0.82"

use serde_derive::Deserialize;
use serde_derive::Serialize;

fn main() {
    let addr = Address { id: 0, street: "aaaaa".to_string() };
    let user = User { Id: 345, name: "username".to_string(), address: addr };
    let json = serde_json::to_string(&user).unwrap();
    println!("{}", json);
    let user200: User = serde_json::from_str(&json).unwrap();
    println!("{} - {}", user200.name, user200.address.street);
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
struct User {
    Id: u32,
    name: String,
    address: Address,
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
struct Address {
    id: u32,
    street: String,
}



***********************************

mod user {
    use serde_derive::Deserialize;
    use serde_derive::Serialize;

    #[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
    #[serde(rename_all = "camelCase")]
    pub struct User {
        id: u32,
        name: String,
    }

    impl User {
        pub fn new(id: u32, name: String) -> Self {
            Self { id, name }
        }

        pub fn to_json(&self) -> String {
            return serde_json::to_string(&self).unwrap();
        }
    }
}

***********************************

use std::collections::HashMap;
use reqwest::header::CONTENT_TYPE;
use serde_derive::Deserialize;
use serde_derive::Serialize;

#[tokio::main]
async fn main() {
    let fact = post_reqwest().await;
    println!("fact = {:#?}", fact);
}

async fn post_reqwest() -> Result<String, Box<dyn std::error::Error>> {
    let mut map = HashMap::new();
    map.insert("lang", "rust");
    map.insert("body", "json");

    let client = reqwest::Client::new();
    let response = client.post("http://localhost:8081")
        .header(CONTENT_TYPE, "application/json")
        .json(&map)
        .send()
        .await?;
    let body = response.text().await?;
    let user: User = serde_json::from_str(&body).unwrap();
    return Ok("".to_string());
}

#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
struct User {
    id: String,
    name: String,
    age: i8,
}
